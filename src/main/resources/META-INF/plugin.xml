<!--
    Scribe
    Copyright (C) 2022 ParchmentMC

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
-->

<idea-plugin url="https://github.com/ParchmentMC/Scribe">
    <idea-version since-build="221"/>
    <id>org.parchmentmc.scribe</id>
    <name>Scribe</name>
    <vendor>ParchmentMC</vendor>

    <description><![CDATA[
      This plugin adds integration with Parchment to IntelliJ.
      <br/><br/>
      Currently supported features are:
      <ul>
        <li>Loading mapping data from a Parchment data folder, export JSON file, or ZIP archive and displaying parameter hints</li>
        <li>Mapping parameters and saving to disk</li>
        <li>Using mapping data when overriding mapped methods</li>
      </ul>
      <br/>
      To use, go to <code>Settings > Tools > Parchment Mappings</code>, and provide the full path to the <code>data</code> folder in a Git clone of the Parchment repo OR a downloaded Parchment export zip.
      This can be configured on a per-project basis.
      You may want to click <code>Save as Default Path</code> to save the mapping path as the default for any projects which do not specify one.
      After applying the settings, parameter hints will appear in Mojang classes, and a <code>Map Parameter</code> action will appear in the context menu if you load a folder for mappings.
    ]]></description>

    <depends>com.intellij.modules.platform</depends>
    <depends>com.intellij.java</depends>
    <depends>com.intellij.gradle</depends>
    <depends>org.intellij.groovy</depends>
    <depends>ByteCodeViewer</depends>

    <extensions defaultExtensionNs="com.intellij">
        <codeInsight.inlayProvider language="JAVA" implementationClass="org.parchmentmc.scribe.hints.ParchmentHintProvider"/>
        <projectService serviceImplementation="org.parchmentmc.scribe.settings.ParchmentProjectSettings"/>

        <projectConfigurable displayName="Parchment Mappings"
                             parentId="tools"
                             id="org.parchmentmc.scribe.settings.ParchmentProjectConfigurable"
                             instance="org.parchmentmc.scribe.settings.ParchmentProjectConfigurable"
                             nonDefaultProject="false"/>

        <methodImplementor implementation="org.parchmentmc.scribe.overrideImplement.ParchmentMethodImplementor"/>

        <localInspection displayName="Method parameters are not mapped to Parchment"
                         groupName="Parchment"
                         language="JAVA"
                         enabledByDefault="true"
                         level="INFORMATION"
                         hasStaticDescription="true"
                         implementationClass="org.parchmentmc.scribe.inspection.NonParchmentMethodParametersInspection"/>

        <fileDocumentManagerListener implementation="org.parchmentmc.scribe.io.ParchmentFileListener"/>

        <externalProjectDataService implementation="org.parchmentmc.scribe.gradle.ForgeGradleDataService"/>
    </extensions>

    <extensions defaultExtensionNs="org.jetbrains.plugins.gradle">
        <projectResolve implementation="org.parchmentmc.scribe.gradle.ForgeGradleProjectResolverExtension"/>
    </extensions>

    <actions>
        <group id="ScribeParchment"
               icon="/icons/parchment.png"
               popup="true"
               text="Parchment"
               description="Contains functionality relating to Parchment mappings">
            <action class="org.parchmentmc.scribe.action.MapParameterAction" id="MapParchmentParameterAction"
                    text="Map Parchment Parameter"
                    description="Maps a parameter for Parchment and saves it to the mappings folder. Only enabled when the mappings path is an exploded folder with Enigma .mapping files.">
            </action>
            <action class="org.parchmentmc.scribe.action.MapJavadocAction" id="MapParchmentJavadocAction"
                    text="Map Parchment Javadoc"
                    description="Maps documentation for Parchment and saves it to the mappings folder. Only enabled when the mappings path is an exploded folder with Enigma .mapping files.">
            </action>
            <!--<action class="org.parchmentmc.scribe.action.RemapMethodParametersAction" id="RemapMethodParametersAction"-->
            <!--        text="Remap Method Parameters"-->
            <!--        description="Updates the parameter names of the selected method to use Parchment parameters if they exist">-->
            <!--</action>-->
            <add-to-group group-id="EditorPopupMenu" relative-to-action="EditorPopupMenu2" anchor="after"/>
        </group>
        <action class="org.parchmentmc.scribe.action.ResetMappingsAction" id="ResetParchmentMappingsAction"
                icon="/icons/parchment.png"
                text="Reset Parchment Mappings"
                description="Overwrites the in-memory mappings with the mappings saved on disk">
        </action>
    </actions>
</idea-plugin>
