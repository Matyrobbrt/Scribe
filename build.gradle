plugins {
    id 'java'
    id 'groovy'
    id 'org.jetbrains.kotlin.jvm' version "${kotlinVersion}"
    id 'idea'
    id 'org.jetbrains.intellij' version '1.13.3'
    id 'org.cadixdev.licenser' version '0.6.1'
}

group = pluginGroup
version = pluginVersion

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

sourceSets {
    gradleToolingExtension {
        compileClasspath += sourceSets.main.compileClasspath
        runtimeClasspath += sourceSets.main.runtimeClasspath
    }
}

repositories {
    mavenCentral()
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
    maven {
        name = 'Minecraft Forge'
        url = 'https://maven.minecraftforge.net'
    }
    maven {
        name = 'IntelliJ Dependencies'
        url = 'https://cache-redirector.jetbrains.com/intellij-dependencies'
    }
}

dependencies {
    implementation "org.parchmentmc.feather:io-moshi:${featherVersion}"
    implementation "com.squareup.moshi:moshi-kotlin:${moshiVersion}"
    implementation "net.minecraftforge:srgutils:${srgutilsVersion}"

    // ASM
    implementation "org.ow2.asm:asm:${asmVersion}"
    implementation "org.ow2.asm:asm-tree:${asmVersion}"
    implementation "org.ow2.asm:asm-analysis:${asmVersion}"

    gradleToolingExtensionCompileOnly "org.codehaus.groovy:groovy-all:${groovyVersion}"
    gradleToolingExtensionCompileOnly sourceSets.main.output
}

configurations.implementation {
    exclude group: 'org.jetbrains.kotlin'
}

intellij {
    pluginName = project.properties.pluginName
    type = platformType
    version = platformVersion

    downloadSources = true
    updateSinceUntilBuild = false
    plugins = ['java', 'gradle', 'Groovy', 'ByteCodeViewer']
    sandboxDir = layout.projectDirectory.dir(".sandbox").toString()
}

license {
    header = file('HEADER')
    ext {
        name = 'Scribe'
        year = 2023
        holder = 'ParchmentMC'
    }
    exclude '**/bytecode-utils.kt', '**/class-utils.kt', '**/MemberReference.kt', '**/psi-utils.kt', '**/gradle-util.kt'
}

idea.module.excludeDirs.add(project.file(intellij.sandboxDir.get()))

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    compilerOptions {
        jvmTarget = org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_17
        freeCompilerArgs = ['-Xjvm-default=all']
    }
}

compileGradleToolingExtensionKotlin {
    compilerOptions {
        jvmTarget = org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_1_8
    }
}

compileGradleToolingExtensionJava {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

compileGradleToolingExtensionGroovy {
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(8)
    }
    def kotlinTask = tasks.compileGradleToolingExtensionKotlin
    dependsOn kotlinTask
    classpath += files(kotlinTask.destinationDirectory)
}

jar {
    from sourceSets.gradleToolingExtension.output
}
